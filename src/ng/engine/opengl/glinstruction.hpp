#ifndef NG_GLINSTRUCTION_HPP
#define NG_GLINSTRUCTION_HPP

#include "ng/engine/opengl/globject.hpp"

#include <cstdint>
#include <vector>
#include <memory>
#include <future>

#include <GL/gl.h>

namespace ng
{

struct OpenGLInstruction
{
    using OpCodeType = std::uint32_t;
    using ParamType = std::uintptr_t;

    static const std::size_t MaxParams = 16;

    OpCodeType OpCode;
    std::size_t NumParams;
    ParamType Params[1]; // note: flexible array sized by NumParams

    std::size_t GetByteSize() const
    {
        return GetSizeForNumParams(NumParams);
    }

    static std::size_t GetMaxByteSize()
    {
        return GetSizeForNumParams(MaxParams);
    }

    static constexpr std::size_t GetSizeForNumParams(std::size_t params)
    {
        return sizeof(OpenGLInstruction) + (params - 1) * sizeof(Params[0]);
    }
};

static_assert(std::is_pod<OpenGLInstruction>::value, "GPUInstructions must be plain old data.");

class OpenGLInstructionLinearBuffer
{
    std::vector<char> mBuffer;
    std::size_t mReadHead;
    std::size_t mWriteHead;

public:
    OpenGLInstructionLinearBuffer(std::size_t commandBufferSize);

    // Returns true on success, false on failure.
    // On failure, the instruction is not pushed. Failure happens due to not enough memory.
    // Failure can be handled either by increasing commandBufferSize, or by flushing the instructions.
    bool PushInstruction(const OpenGLInstruction& inst);

    // Checks if there is an instruction available to read.
    bool CanPopInstruction() const;

    // returns true and writes to inst if there was something to pop that was popped.
    // returns false otherwise.
    // Warning: make sure you're writing to an instruction allocated with enough room!
    //          recommend allocating a SizedOpenGLInstruction<OpenGLInstruction::MaxParams>
    // nice pattern: while (PopInstruction(inst))
    bool PopInstruction(OpenGLInstruction& inst);

    // Resets the linear buffer back to the start.
    void Reset();
};

class OpenGLInstructionRingBuffer
{
    std::vector<char> mBuffer;
    std::size_t mReadHead;
    std::size_t mWriteHead;

public:
    OpenGLInstructionRingBuffer(std::size_t instructionBufferSize);

    // Returns true on success, false on failure.
    // On failure, the instruction is not pushed. Failure happens due to not enough memory.
    // Failure can be handled either by increasing commandBufferSize, or by flushing the instructions.
    bool PushInstruction(const OpenGLInstruction& inst);

    // returns true if there is an instruction available to read
    bool CanPopInstruction() const;

    // returns true and writes to inst if there was something to pop that was popped.
    // returns false otherwise.
    // Warning: make sure you're writing to an instruction allocated with enough room!
    //          recommend allocating a SizedOpenGLInstruction<OpenGLInstruction::MaxParams>
    // nice pattern: while (PopInstruction(inst))
    bool PopInstruction(OpenGLInstruction& inst);
};

enum class OpenGLOpCode : OpenGLInstruction::OpCodeType
{
    Clear,
    // params:
    //         0) GLbitfield mask
    // notes:
    //         * acts as glClear.
    GenBuffer,
    // params:
    //         0) std::promise<std::shared_ptr<OpenGLBufferHandle>>* bufferPromise
    // notes:
    //         * the promised OpenGLBufferHandle will be created by glGenBuffers.
    //         * will release ownership of bufferPromise (ie. delete bufferPromise.)
    DeleteBuffer,
    // params:
    //         0) GLuint buffer
    // notes:
    //         * buffer must be a buffer ID generated by glGenBuffers (or 0.)
    //         * buffer will be deleted with glDeleteBuffers.
    BufferData,
    // params:
    //         0) std::promise<std::shared_ptr<OpenGLBufferHandle>>* bufferDataPromise
    //         1) std::shared_future<std::shared_ptr<OpenGLBufferHandle>>* bufferHandle
    //         2) GLenum target
    //         3) GLsizeiptr size
    //         4) std::shared_ptr<const void>* dataHandle
    //         5) GLenum usage
    // notes:
    //         * will fulfill the promise of a buffer filled with data.
    //         * the buffer will be allocated and filled with data by binding it to target.
    //         * dataHandle may be pointing to nullptr, which will leave the buffer uninitialized.
    //         * will release ownership of dataHandle (ie. delete dataHandle.)
    //         * will release ownership of bufferHandle (ie. delete bufferHandle.)
    //         * will release ownership of the bufferDataPromise (ie. delete bufferDataPromise.)
    GenVertexArray,
    // params:
    //         0) std::promise<std::shared_ptr<OpenGLVertexArrayHandle>>* vertexArrayPromise
    // notes:
    //         * the promised OpenGLVertexArrayHandle will be created by glGenVertexArrays.
    //         * will release ownership of vertexArrayPromise (ie. delete vertexArrayPromise.)
    DeleteVertexArray,
    // params:
    //         0) GLuint vao
    // notes:
    //         * vao must be a vertex array ID generated by glGenVertexArrays (or 0.)
    //         * vao will be deleted with glDeleteVertexArrays.
    SetVertexArrayLayout,
    // params:
    //         0) std::promise<std::shared_ptr<OpenGLVertexArrayHandle>>* vertexArrayLayoutPromise
    //         1) std::shared_future<std::shared_ptr<OpenGLVertexArrayHandle>>* vertexArrayHandle
    //         2) VertexFormat* format
    //         3) std::map<VertexAttributeName,std::shared_future<std::shared_ptr<OpenGLBufferHandle>>>* attributeBuffers
    //         4) std::shared_future<std::shared_ptr<OpenGLBufferHandle>>* indexBuffer
    // notes:
    //         * will setup the layout of the promised vertex array.
    //         * will release ownership of indexBuffer (ie. delete indexBuffer)
    //         * will release ownership of attributeBuffers (ie. delete attributeBuffers)
    //         * will release ownership of vertexFormat (ie. delete vertexFormat)
    //         * will release ownership of vertexArrayPromise (ie. delete vertexArrayPromise)
    GenShader,
    // params:
    //         0) std::promise<std::shared_ptr<OpenGLShaderHandle>>* shaderPromise
    //         1) GLenum shaderType
    // notes:
    //         * the promised OpenGLShaderHandle will be created by glCreateShader(shaderType).
    //         * will release ownership of the shaderPromise (ie. delete shaderPromise.)
    DeleteShader,
    // params:
    //         0) GLuint shader
    // notes:
    //         * shader must be a shader ID generated by glCreateShader (or 0.)
    //         * shader will be deleted with glDeleteShader.
    CompileShader,
    // params:
    //         0) std::promise<std::shared_ptr<OpenGLShaderHandle>>* compiledShaderPromise
    //         1) std::shared_future<std::shared_ptr<OpenGLShaderHandle>>* shaderHandle
    //         2) std::shared_ptr<const char>* sourceHandle
    // notes:
    //         * will fulfill the promise of a compiled shader.
    //         * compiles the source in sourceHandle into shaderHandle.
    //         * will release ownership of the sourceHandle (ie. delete sourceHandle.)
    //         * will release ownership of the shaderHandle (ie. delete shaderHandle.)
    //         * will release ownership of the compiledShaderPromise (ie. delete compiledShaderPromise.)
    ShaderStatus,
    // params:
    //         0) std::promise<std::pair<bool,std::string>>* statusPromise
    //         1) std::shared_future<std::shared_ptr<OpenGLShaderHandle>>* shaderHandle
    // notes:
    //         * gets the status of the shader and stores it in the promise.
    //         * will release ownership of the shaderHandle (ie. delete shaderHandle.)
    //         * will release ownership of the statusPromise (ie. delete statusPromise.)
    GenShaderProgram,
    // params:
    //         0) std::promise<std::shared_ptr<OpenGLShaderProgramHandle>>* shaderProgramPromise
    // notes:
    //         * the promised OpenGLShaderProgramHandle will be created by glCreateProgram.
    //         * will release ownership of the shaderProgramPromise (ie. delete shaderProgramPromise.)
    DeleteShaderProgram,
    // params:
    //         0) GLuint program
    // notes:
    //         * program must be a program ID generated by glCreateProgram (or 0.)
    //         * program will be deleted with glDeleteProgram.
    LinkShaderProgram,
    // params:
    //         0) std::promise<std::shared_ptr<OpenGLShaderProgramHandle>>* linkedProgramPromise
    //         0) std::shared_future<std::shared_ptr<OpenGLShaderProgramHandle>>* shaderProgramHandle
    //         1) std::shared_future<std::shared_ptr<OpenGLShaderHandle>>* vertexShaderHandle
    //         2) std::shared_future<std::shared_ptr<OpenGLShaderHandle>>* fragmentShaderHandle
    // notes:
    //         * will fulfill the promise of a linked program.
    //         * will attach and link the vertex and fragment shaders to the program.
    //         * will release ownership of fragmentShaderHandle (ie. delete fragmentShaderHandle)
    //         * will release ownership of vertexShaderHandle (ie. delete vertexShaderHandle)
    //         * will release ownership of shaderProgramHandle (ie. delete shaderProgramHandle)
    //         * will release ownership of linkedProgramPromise (ie. delete linkedProgramPromise)
    ShaderProgramStatus,
    // params:
    //         0) std::promise<std::pair<bool,std::string>>* statusPromise
    //         1) std::shared_future<std::shared_ptr<OpenGLShaderProgramHandle>>* shaderProgramHandle
    // notes:
    //         * gets the status of the shader and stores it in the promise.
    //         * will release ownership of the shaderProgramHandle (ie. delete shaderProgramHandle.)
    //         * will release ownership of the statusPromise (ie. delete statusPromise.)
    DrawVertexArray,
    //         0) std::shared_future<std::shared_ptr<OpenGLVertexArrayHandle>>* vertexArrayHandle
    //         1) std::shared_future<std::shared_ptr<OpenGLShaderProgramHandle>>* programHandle
    //         2) GLenum mode
    //         3) GLint firstVertexIndex
    //         4) GLsizei vertexCount
    // notes:
    //         * will render the vertexArray using the program.
    //         * will release ownership of the programHandle (ie. delete programHandle.)
    //         * will release ownership of vertexArray (ie. delete vertexArray.)
    SwapBuffers,
    // params:
    //         none.
    // notes:
    //         * special instruction to signal a swap of buffers to the window.
    Quit
    // params:
    //         none.
    // notes:
    //         * special instruction to exit the graphics thread.
};

static constexpr const char* OpenGLOpCodeToString(OpenGLOpCode code)
{
    return code == OpenGLOpCode::Clear ? "Clear"
         : code == OpenGLOpCode::GenBuffer ? "GenBuffer"
         : code == OpenGLOpCode::DeleteBuffer ? "DeleteBuffer"
         : code == OpenGLOpCode::BufferData ? "BufferData"
         : code == OpenGLOpCode::GenShader ? "GenShader"
         : code == OpenGLOpCode::DeleteShader ? "DeleteShader"
         : code == OpenGLOpCode::CompileShader ? "CompileShader"
         : code == OpenGLOpCode::ShaderStatus ? "ShaderStatus"
         : code == OpenGLOpCode::GenShaderProgram ? "GenShaderProgram"
         : code == OpenGLOpCode::DeleteShaderProgram ? "DeleteShaderProgram"
         : code == OpenGLOpCode::LinkShaderProgram ? "LinkShaderProgram"
         : code == OpenGLOpCode::ShaderProgramStatus ? "ShaderProgramStatus"
         : code == OpenGLOpCode::DrawVertexArray ? "DrawVertexArray"
         : code == OpenGLOpCode::SwapBuffers ? "SwapBuffers"
         : code == OpenGLOpCode::Quit ? "Quit"
         : throw std::logic_error("No such OpenGLOpCode");
}

template<std::size_t NParams>
struct SizedOpenGLInstruction
{
    static_assert(NParams <= OpenGLInstruction::MaxParams, "Limit of OpenGL instruction parameters should be respected.");

    struct NoInitTag { };

    union
    {
        char InstructionData[OpenGLInstruction::GetSizeForNumParams(NParams)];
        OpenGLInstruction Instruction;
    };

    SizedOpenGLInstruction(NoInitTag){ }

    SizedOpenGLInstruction(OpenGLOpCode code)
    {
        Instruction.NumParams = NParams;
        Instruction.OpCode = static_cast<OpenGLInstruction::OpCodeType>(code);
    }
};

template<class HandleType, OpenGLOpCode OpCode>
struct GenResourceOpCodeParams
{
    std::unique_ptr<std::promise<std::shared_ptr<HandleType>>> Promise;

    bool AutoCleanup;

    GenResourceOpCodeParams(std::unique_ptr<std::promise<std::shared_ptr<HandleType>>> promise, bool autoCleanup)
        : Promise(std::move(promise))
        , AutoCleanup(autoCleanup)
    { }

    GenResourceOpCodeParams(const OpenGLInstruction& inst, bool autoCleanup)
        : Promise(reinterpret_cast<std::promise<std::shared_ptr<HandleType>>*>(inst.Params[0]))
        , AutoCleanup(autoCleanup)
    { }

    ~GenResourceOpCodeParams()
    {
        if (!AutoCleanup)
        {
            Promise.release();
        }
    }

    SizedOpenGLInstruction<1> ToInstruction() const
    {
        SizedOpenGLInstruction<1> si(OpCode);
        si.Instruction.Params[0] = reinterpret_cast<std::uintptr_t>(Promise.get());
        return si;
    }
};

template<class HandleType, OpenGLOpCode OpCode>
struct StatusOpCodeParams
{
    std::unique_ptr<std::promise<std::pair<bool,std::string>>> Promise;
    std::unique_ptr<std::shared_future<std::shared_ptr<HandleType>>> Handle;

    bool AutoCleanup;

    StatusOpCodeParams(std::unique_ptr<std::promise<std::pair<bool,std::string>>> promise,
                       std::unique_ptr<std::shared_future<std::shared_ptr<HandleType>>> handle,
                       bool autoCleanup)
        : Promise(std::move(promise))
        , Handle(std::move(handle))
        , AutoCleanup(autoCleanup)
    { }

    StatusOpCodeParams(const OpenGLInstruction& inst, bool autoCleanup)
        : Promise(reinterpret_cast<std::promise<std::pair<bool,std::string>>*>(inst.Params[0]))
        , Handle(reinterpret_cast<std::shared_future<std::shared_ptr<HandleType>>*>(inst.Params[1]))
        , AutoCleanup(autoCleanup)
    { }

    ~StatusOpCodeParams()
    {
        if (!AutoCleanup)
        {
            Handle.release();
            Promise.release();
        }
    }

    SizedOpenGLInstruction<2> ToInstruction() const
    {
        SizedOpenGLInstruction<2> si(OpCode);
        si.Instruction.Params[0] = reinterpret_cast<std::uintptr_t>(Promise.get());
        si.Instruction.Params[1] = reinterpret_cast<std::uintptr_t>(Handle.get());
        return si;
    }
};

template<OpenGLOpCode OpCode>
struct DeleteResourceOpCodeParams
{
    GLuint Handle;

    DeleteResourceOpCodeParams(GLuint handle)
        : Handle(handle)
    { }

    DeleteResourceOpCodeParams(const OpenGLInstruction &inst)
        : Handle(inst.Params[0])
    { }

    SizedOpenGLInstruction<1> ToInstruction() const
    {
        SizedOpenGLInstruction<1> si(OpCode);
        si.Instruction.Params[0] = Handle;
        return si;
    }
};

struct ClearOpCodeParams
{
    GLbitfield Mask;

    ClearOpCodeParams(GLbitfield mask);
    ClearOpCodeParams(const OpenGLInstruction& inst);

    SizedOpenGLInstruction<1> ToInstruction() const;
};

using GenBufferOpCodeParams = GenResourceOpCodeParams<OpenGLBufferHandle, OpenGLOpCode::GenBuffer>;
using DeleteBufferOpCodeParams = DeleteResourceOpCodeParams<OpenGLOpCode::DeleteBuffer>;

struct BufferDataOpCodeParams
{
    std::unique_ptr<std::promise<std::shared_ptr<OpenGLBufferHandle>>> BufferDataPromise;
    std::unique_ptr<std::shared_future<std::shared_ptr<OpenGLBufferHandle>>> BufferHandle;
    GLenum Target;
    GLsizeiptr Size;
    std::unique_ptr<std::shared_ptr<const void>> DataHandle;
    GLenum Usage;

    bool AutoCleanup;

    BufferDataOpCodeParams(
            std::unique_ptr<std::promise<std::shared_ptr<OpenGLBufferHandle>>> bufferDataPromise,
            std::unique_ptr<std::shared_future<std::shared_ptr<OpenGLBufferHandle>>> bufferHandle,
            GLenum target,
            GLsizeiptr size,
            std::unique_ptr<std::shared_ptr<const void>> dataHandle,
            GLenum usage,
            bool autoCleanup);

    BufferDataOpCodeParams(const OpenGLInstruction& inst, bool autoCleanup);

    ~BufferDataOpCodeParams();

    SizedOpenGLInstruction<6> ToInstruction() const;
};

using GenVertexArrayOpCodeParams = GenResourceOpCodeParams<OpenGLVertexArrayHandle, OpenGLOpCode::GenVertexArray>;
using DeleteVertexArrayOpCodeParams = DeleteResourceOpCodeParams<OpenGLOpCode::DeleteVertexArray>;

struct SetVertexArrayLayoutOpCodeParams
{
    std::unique_ptr<std::promise<std::shared_ptr<OpenGLVertexArrayHandle>>> VertexArrayPromise;
    std::unique_ptr<std::shared_future<std::shared_ptr<OpenGLVertexArrayHandle>>> VertexArrayHandle;
    std::unique_ptr<VertexFormat> Format;
    std::unique_ptr<std::map<VertexAttributeName,std::shared_future<std::shared_ptr<OpenGLBufferHandle>>>> AttributeBuffers;
    std::unique_ptr<std::shared_future<std::shared_ptr<OpenGLBufferHandle>>> IndexBuffer;

    bool AutoCleanup;

    SetVertexArrayLayoutOpCodeParams(
            std::unique_ptr<std::promise<std::shared_ptr<OpenGLVertexArrayHandle>>>  vertexArrayPromise,
            std::unique_ptr<std::shared_future<std::shared_ptr<OpenGLVertexArrayHandle>>> vertexArrayHandle,
            std::unique_ptr<VertexFormat> format,
            std::unique_ptr<std::map<VertexAttributeName,std::shared_future<std::shared_ptr<OpenGLBufferHandle>>>> attributeBuffers,
            std::unique_ptr<std::shared_future<std::shared_ptr<OpenGLBufferHandle>>> indexBuffer,
            bool autoCleanup);

    SetVertexArrayLayoutOpCodeParams(const OpenGLInstruction& inst, bool autoCleanup);

    ~SetVertexArrayLayoutOpCodeParams();

    SizedOpenGLInstruction<5> ToInstruction() const;
};

struct GenShaderOpCodeParams
{
    std::unique_ptr<std::promise<std::shared_ptr<OpenGLShaderHandle>>> ShaderPromise;
    GLenum ShaderType;

    bool AutoCleanup;

    GenShaderOpCodeParams(
            std::unique_ptr<std::promise<std::shared_ptr<OpenGLShaderHandle>>> shaderPromise,
            GLenum shaderType, bool autoCleanup);

    GenShaderOpCodeParams(const OpenGLInstruction& inst, bool autoCleanup);

    ~GenShaderOpCodeParams();

    SizedOpenGLInstruction<2> ToInstruction() const;
};

using DeleteShaderOpCodeParams = DeleteResourceOpCodeParams<OpenGLOpCode::DeleteShader>;

struct CompileShaderOpCodeParams
{
    std::unique_ptr<std::promise<std::shared_ptr<OpenGLShaderHandle>>> CompiledShaderPromise;
    std::unique_ptr<std::shared_future<std::shared_ptr<OpenGLShaderHandle>>> ShaderHandle;
    std::unique_ptr<std::shared_ptr<const char>> SourceHandle;

    bool AutoCleanup;

    CompileShaderOpCodeParams(
            std::unique_ptr<std::promise<std::shared_ptr<OpenGLShaderHandle>>> compiledShaderPromise,
            std::unique_ptr<std::shared_future<std::shared_ptr<OpenGLShaderHandle>>> shaderHandle,
            std::unique_ptr<std::shared_ptr<const char>> sourceHandle,
            bool autoCleanup);

    CompileShaderOpCodeParams(const OpenGLInstruction& inst, bool autoCleanup);

    ~CompileShaderOpCodeParams();

    SizedOpenGLInstruction<3> ToInstruction() const;
};

using ShaderStatusOpCodeParams = StatusOpCodeParams<OpenGLShaderHandle, OpenGLOpCode::ShaderStatus>;

using GenShaderProgramOpCodeParams = GenResourceOpCodeParams<OpenGLShaderProgramHandle, OpenGLOpCode::GenShaderProgram>;
using DeleteShaderProgramOpCodeParams = DeleteResourceOpCodeParams<OpenGLOpCode::DeleteShaderProgram>;

struct LinkShaderProgramOpCodeParams
{
    std::unique_ptr<std::promise<std::shared_ptr<OpenGLShaderProgramHandle>>> LinkedProgramPromise;
    std::unique_ptr<std::shared_future<std::shared_ptr<OpenGLShaderProgramHandle>>> ShaderProgramHandle;
    std::unique_ptr<std::shared_future<std::shared_ptr<OpenGLShaderHandle>>> VertexShaderHandle;
    std::unique_ptr<std::shared_future<std::shared_ptr<OpenGLShaderHandle>>> FragmentShaderHandle;

    bool AutoCleanup;

    LinkShaderProgramOpCodeParams(
            std::unique_ptr<std::promise<std::shared_ptr<OpenGLShaderProgramHandle>>> linkedProgramPromise,
            std::unique_ptr<std::shared_future<std::shared_ptr<OpenGLShaderProgramHandle>>> shaderProgramHandle,
            std::unique_ptr<std::shared_future<std::shared_ptr<OpenGLShaderHandle>>> vertexShaderHandle,
            std::unique_ptr<std::shared_future<std::shared_ptr<OpenGLShaderHandle>>> fragmentShaderHandle,
            bool autoCleanup);

    LinkShaderProgramOpCodeParams(const OpenGLInstruction& inst, bool autoCleanup);

    ~LinkShaderProgramOpCodeParams();

    SizedOpenGLInstruction<4> ToInstruction() const;
};

using ShaderProgramStatusOpCodeParams = StatusOpCodeParams<OpenGLShaderProgramHandle, OpenGLOpCode::ShaderProgramStatus>;

struct DrawVertexArrayOpCodeParams
{
    std::unique_ptr<std::shared_future<std::shared_ptr<OpenGLVertexArrayHandle>>> VertexArrayHandle;
    std::unique_ptr<std::shared_future<std::shared_ptr<OpenGLShaderProgramHandle>>> ProgramHandle;
    GLenum Mode;
    GLint FirstVertexIndex;
    GLsizei VertexCount;

    bool AutoCleanup;

    DrawVertexArrayOpCodeParams(
            std::unique_ptr<std::shared_future<std::shared_ptr<OpenGLVertexArrayHandle>>> vertexArrayHandle,
            std::unique_ptr<std::shared_future<std::shared_ptr<OpenGLShaderProgramHandle>>> programHandle,
            GLenum mode,
            GLint firstVertexIndex,
            GLsizei vertexCount,
            bool autoCleanup);

    DrawVertexArrayOpCodeParams(const OpenGLInstruction& inst, bool autoCleanup);

    ~DrawVertexArrayOpCodeParams();

    SizedOpenGLInstruction<5> ToInstruction() const;
};

struct SwapBuffersOpCodeParams
{
    SwapBuffersOpCodeParams();

    SizedOpenGLInstruction<0> ToInstruction() const;
};

struct QuitOpCodeParams
{
    QuitOpCodeParams();

    SizedOpenGLInstruction<0> ToInstruction() const;
};

} // end namespace ng

#endif // NG_GLINSTRUCTION_HPP
